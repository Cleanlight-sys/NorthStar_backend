from supabase import create_client
import os
from dotenv import load_dotenv
import numpy as np
from collections import defaultdict

load_dotenv()
sb = create_client(os.getenv("SUPABASE_URL"), os.getenv("SUPABASE_SERVICE_KEY"))

VECTOR_DIM = 384

def recompute_centroids():
    rows = sb.table("coder_memory").select("*").eq("record_type", "PROFILE").execute().data

    # Group by problem_type_hash
    grouped = defaultdict(list)
    for r in rows:
        grouped[r["problem_type_hash"]].append(r)

    for key, profiles in grouped.items():
        avg = np.zeros(VECTOR_DIM)
        count = 0
        for p in profiles:
            delta = p.get("weights_delta", {})
            for k, v in delta.items():
                avg[int(k)] += float(v)
            count += 1
        if count == 0:
            continue

        centroid_vec = {str(i): round(v / count, 6) for i, v in enumerate(avg)}
        # Upsert a centroid row
        sb.table("coder_memory").upsert({
            "record_type": "PROFILE",
            "problem_type_hash": key,
            "weights_delta": centroid_vec,
            "centroid_flag": True,
            "facets": [],
            "metrics": {"pass_rate": 0},
            "notes": "Autogenerated centroid",
        }, on_conflict=["problem_type_hash", "centroid_flag"]).execute()
